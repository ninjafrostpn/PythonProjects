import pygame
from pygame.locals import *
import numpy as np
import time

pygame.init()

# https://en.wikipedia.org/wiki/Rotation_matrix
# Matrix for rotating a 2D vector widdershins by angle theta
R = lambda theta: np.sin((np.float64([[0.5, 1], [0, 0.5]]) * np.pi) + theta)


# This function chops up sides until they're smaller than a certain size
def subdivide(vertices, maxlength):
    # The distance between each vertex and the previous one
    d = np.linalg.norm(vertices - [vertices[-1], *vertices[:-1]], axis=1)
    # All the sides which are longer than the maximum permitted
    cuts = np.nonzero(d > maxlength)[0]
    # The minimum number of cuts required to bring those sides down to size
    ncuts = np.int32(np.ceil(d[cuts] / maxlength))
    # Generates an array of new vertices to insert
    newverts = np.zeros((2, 0), "float64")
    for i in range(len(cuts)):
        # Interpolates xs and ys of each too-long side as required (discards end vertices, as these already exist)
        newverts = np.append(newverts, [np.linspace(vertices[cuts[i] - 1, 0], vertices[cuts[i], 0], ncuts[i])[1:-1],
                                        np.linspace(vertices[cuts[i] - 1, 1], vertices[cuts[i], 1], ncuts[i])[1:-1]],
                             axis=1)
    vertices = np.insert(vertices, np.repeat(cuts, ncuts - 2), newverts.T, axis=0)
    return vertices


w, h = 500, 250
screensize = np.int32((w, h))
screen = pygame.display.set_mode(screensize)

# TODO: Optimise this darned thing so that this number can be higher than 100
fps = 100
deltaT = 1 / fps

airresist = 0.999
bounciness = 0.5
gravity = 500

keys = set()

polygons = []


class Polygon:
    # TODO: Add crushing and other functions for coolness
    def __init__(self, vertices, density=0.001, opensides=None, vel=(0, 0), avel=0):
        self.vel = np.float64(vel)
        self.acc = np.zeros(2, "float64")
        self.ang = 0
        self.avel = avel
        self.aacc = 0
        # Define vertices convex and clockwise pls
        # Vertices defined relative to centre
        self.vertices = subdivide(np.float64(vertices), 10)
        self.centre = np.mean(self.vertices, axis=0)
        self.currvertices = self.vertices.copy()
        self.vertices -= self.centre
        # Vectors pointing clockwise from each vertex (with a z dimension of 0
        tangents = np.float64([[*(self.vertices[(i + 1) % len(self.vertices)] - self.vertices[i]), 0]
                               for i in range(len(self.vertices))])
        # Vectors pointing outward from the side clockwise of each vertex
        self.normals = np.cross(tangents, [0, 0, 1], axisa=1)[:, :2]
        self.normals = (self.normals.T / np.linalg.norm(self.normals, axis=1)).T
        self.currnormals = self.normals.copy()
        # For convex shape, look at pairs of adjacent vertices with average of all vertices to form triangles
        # Find areas and centres of these triangles -> sum of areas * density for mass
        #                                              weighted average by [area * density] for com
        #                                              masses and areas also used to calculate inertia
        self.density = density
        areas = []
        centroids = []
        inertias = []
        for i in range(len(self.vertices)):
            pts = np.int32([[0, 0], self.vertices[i - 1], self.vertices[i]])
            centroids.append(np.mean(pts, axis=0))
            # Triangular area from https://www.mathopenref.com/coordtrianglearea.html
            # |ax(by - cy) + bx(cy - ay) + cx(ay - by)| / 2
            areas.append(np.abs(np.sum(pts[[0, 1, 2], 0] * (pts[[1, 2, 0], 1] - pts[[2, 0, 1], 1]))) / 2)
            # https://en.wikipedia.org/wiki/List_of_second_moments_of_area
            # https://en.wikipedia.org/wiki/Perpendicular_axis_theorem
            # https://www.khanacademy.org/science/physics/torque-angular-momentum/torque-tutorial/a/rotational-inertia
            bt = np.linalg.norm(self.vertices[i] - self.vertices[i - 1])
            ht = np.sum(self.vertices[i - 1] * self.normals[i - 1])
            at = np.linalg.norm(self.vertices[i - 1] - (self.normals[i - 1] * ht))
            # Ix = b.h^3 / 12, Iy = b.h.(a^2 + a.b + b^2) / 12, so Iz = b.h.(h^2 + a^2 + b^2 + a.b) / 12
            # Translates to inertia at the centre of mass: Io = Iz + m.d^2
            inertias.append(self.density *
                            (((bt * ht * ((ht**2) + (at**2) + (bt**2) + (at * bt))) / 12) +
                             (areas[-1] * (ht**2))))
        self.area = np.sum(areas)
        self.inertia = np.sum(inertias)
        self.mass = density * self.area
        print(self.mass, self.inertia)
        # Calculating centre of mass: https://www.youtube.com/watch?v=Px_KdmC7HlA
        self.centreofmass = np.sum(np.float64(centroids).T * np.float64(areas), axis=1).T / self.area
        self.radius = np.max(np.linalg.norm(self.vertices, axis=1))
        # This variable will be used later for constructing concave shapes
        # if opensides is not None:
        #     self.opensides = opensides
        # else:
        #     self.opensides = []

    def checkpoints(self, points, getpen=False, getbadvals=False):
        # Use dot product to check if each point is inside the polygon
        # Lines up points a, b, c with sides x, y, z like
        # [a, a, a, b, b, b, c, c, c] and
        # [x, y, z, x, y, z, x, y, z] for calculations
        # Dot product for point-side pair = sum((point - vertex) * normal)
        pendepth = np.sum((np.repeat(points, len(self.currvertices), axis=0)
                           - np.tile(self.currvertices.T, len(points)).T)
                          * np.tile(self.currnormals.T, len(points)).T, axis=1).reshape(len(points), -1)
        verdict = np.all(pendepth <=0, axis=1)
        if getpen:
            # Find the side of smallest penetration depth for each point (i.e. the side they're closest to)
            # (Should this incorporate some idea of entry direction?)
            penside = np.argmax(np.minimum(pendepth, 0), axis=1)
            # And expose the smallest penetration depth (note that this is negative), or nan if none, of each point
            minpendepth = pendepth[np.arange(0, len(points)), penside]
            # Direction and magnitude of penetrations as vectors
            penvec = (self.currnormals[penside].T * minpendepth).T
            if not getbadvals:
                penside[~verdict] = -1
                minpendepth[~verdict] = np.nan
                penvec[~verdict] = np.nan
            ret = [verdict, penside, minpendepth, penvec]
            return ret
        return verdict

    def collidepolygon(self, other):
        # TODO: Add Friction
        check1 = self.checkpoints(other.currvertices, True)
        check2 = other.checkpoints(self.currvertices, True)
        # print(check1[0], check2[0])
        if np.any(check1[0]) or np.any(check2[0]):
            maxpenno = np.nanargmin([*check1[2], *check2[2]])
            if maxpenno < len(check1[1]):
                maxpenside = check1[1][maxpenno]
                maxpendepth = check1[2][maxpenno]
                maxpenvec = check1[3][maxpenno]
                P1 = other  # The polygon with the furthest incurring vertex
                P2 = self   # The polygon being poked by said vertex
                collpos = P1.currvertices[maxpenno] - maxpenvec
            else:
                maxpenside = check2[1][maxpenno - len(check1[1])]
                maxpendepth = check2[2][maxpenno - len(check1[1])]
                maxpenvec = check2[3][maxpenno - len(check1[1])]
                P1 = self   # The polygon with the furthest incurring vertex
                P2 = other  # The polygon being poked by said vertex
                collpos = P1.currvertices[maxpenno - len(check1[1])] - maxpenvec
            # pygame.draw.line(screen, 255 << 16, collpos, collpos + (P2.currnormals[maxpenside] * 10))
            # Move the object to the outside
            if P1.mass == 0:
                P2.centre += maxpenvec
            elif P2.mass == 0:
                P1.centre -= maxpenvec
            else:
                P1.centre -= maxpenvec / 2
                P2.centre += maxpenvec / 2
            P1collpos = (collpos - (P1.centreofmass + P1.centre))
            P2collpos = (collpos - (P2.centreofmass + P2.centre))
            P1rotvel = np.cross([0, 0, P1.avel], [*P1collpos, 0])[:2]
            P2rotvel = np.cross([0, 0, P2.avel], [*P2collpos, 0])[:2]
            relvel = P1.vel + P1rotvel - P2.vel - P2rotvel
            contactvel = np.dot(relvel, P2.currnormals[maxpenside])  # u1 (u2 is set to 0 now)
            # Don't bother with weak collisions, just cancel them
            if contactvel >= 0:
                return False
            if maxpendepth > -0.01:
                if P1.mass != 0:
                    # P1.vel = (P1.vel - (contactvel * P2.currnormals[maxpenside])) + \
                    #          (np.maximum(0, contactvel) * P2.currnormals[maxpenside])
                    P1.centre += maxpenvec
                if P2.mass != 0:
                    # P2.vel = (P2.vel + (contactvel * P2.currnormals[maxpenside])) - \
                    #          (np.maximum(0, contactvel) * P2.currnormals[maxpenside])
                    P2.centre -= maxpenvec
            if P1.mass == 0:
                # Invert the reference frame, so u2 <= -u1, u1 <= 0
                # Rebound velocity, so v2 = -u2
                # Get f1 by calculating -f2 (= f1)
                f1 = -((P2.mass * 2 * contactvel) / deltaT) * P2.currnormals[maxpenside]
            elif P2.mass == 0:
                # Rebound velocity, so v1 = -u1
                f1 = -((P1.mass * 2 * contactvel) / deltaT) * P2.currnormals[maxpenside]
            else:
                v1 = contactvel * (P1.mass - P2.mass) / (P1.mass + P2.mass)
                f1 = ((P1.mass * (v1 - contactvel)) / deltaT) * P2.currnormals[maxpenside]
            P1.applyforce(f1 * bounciness, collpos)
            P2.applyforce(-f1 * bounciness, collpos)
            return True

    def applyforce(self, what, where=None):
        if self.mass > 0:
            what = np.float64(what)
            if where is None:
                self.acc += what / self.mass
            else:
                r = (where - (self.centreofmass + self.centre))
                # F = r * np.sum((r / np.linalg.norm(r)) * what) / np.linalg.norm(r)
                T = np.cross(r, what)
                self.acc += what / self.mass
                self.aacc += T / self.inertia

    def update(self):
        # Positional stuff
        if self.mass != 0:
            self.acc[1] += gravity
        self.vel += self.acc * deltaT
        self.centre += self.vel * deltaT
        self.acc[:] = 0
        self.vel *= airresist
        # Angular stuff
        self.avel += self.aacc * deltaT
        self.ang += self.avel * deltaT
        self.ang %= 2 * np.pi
        self.aacc = 0
        self.avel *= airresist ** 2
        rotmat = R(self.ang)
        self.currvertices = self.centre + np.dot(rotmat, self.vertices.T).T
        self.currnormals = np.dot(rotmat, self.normals.T).T

    def show(self):
        # pygame.draw.polygon(screen, 255, self.centre + self.vertices, 1)
        pygame.draw.polygon(screen, 255, self.currvertices, 1)
        # pygame.draw.circle(screen, 255 << 16, np.int32(self.centre + self.centreofmass), 3)
        # for i in range(len(self.currnormals)):
        #     pygame.draw.line(screen, 255 << 8, self.currvertices[i], self.currvertices[i] + (self.currnormals[i] * -10))

    def snap(self, vertex1, vertex2):
        shapes.remove(self)
        vertex1, vertex2 = min(vertex1, vertex2), max(vertex1, vertex2)
        shapes.append(Polygon([*self.currvertices[:vertex1 + 1].copy(), *self.currvertices[vertex2:].copy()],
                              vel=self.vel.copy(), avel=self.avel))
        shapes.append(Polygon(self.currvertices[vertex1:vertex2 + 1].copy(), vel=self.vel.copy(), avel=self.avel))


# Note to self, adding points in the middle of sides helps (stops equal-sized blocks sliding through each other)
# TODO: Implement this in Polygon code or find a better solution (doesn't stop half-sized blocks)
#       Maybe have polygons generate temporary midpoints for sake of collision

shapes = [Polygon([[0, -100], [0, h + 100], [-100, h + 100], [-100, -100]], 0),
          Polygon([[w, -100], [w + 100, -100], [w + 100, h + 100], [w, h + 100]], 0),
          Polygon([[-100, 0], [-100, -100], [w + 100, -100], [w + 100, 0]], 0),
          Polygon([[-100, h], [w + 100, h], [w + 100, h + 100], [-100, h + 100]], 0)]
n = 5
shapes += [Polygon(np.random.random_sample(2) * (w - 100, h - 100) + 50 +
                   np.float64([np.sin([((t / i) + 0.25) * 2 * np.pi, (t / i) * 2 * np.pi]) * r * 10
                               for t in range(i)]))
           for i, r in zip(np.random.randint(3, 10, n), np.random.randint(1, 6, n))]

# shapes += [Polygon([w/2, i * 10] + np.float64([[-i * 20, -5], [i * 20, -5], [i * 20, 0],
#                                                [i * 20, 5], [-i * 20, 5], [-i * 20, 0]]))
#            for i in range(1, n + 1)]

# shapes += [Polygon([w/4, i * 20] + np.float64([[i * 20, -10], [i * 50, -10], [i * 50, 0],
#                                                [i * 50, 10], [i * 20, 10], [i * 20, 0]]))
#            for i in range(1, n + 1)]


lastupdate = time.time()

while True:
    screen.fill(0)
    while lastupdate < time.time():
        shapes[-1].applyforce((((K_RIGHT in keys) - (K_LEFT in keys)) * 2000,
                              ((K_DOWN in keys) - (K_UP in keys)) * 2000))
        # Leftmost, Upmost, Rightmost, Downmost reach of each Polygon (with the last one first as well)
        lurd = np.float64([[*np.min(shapes[i].currvertices, axis=0), *np.max(shapes[i].currvertices, axis=0)]
                           for i in range(len(shapes))])
        a, b = np.int32([(i, j) for i in range(len(lurd)) for j in range(len(lurd)) if j > max(i, 3)]).T
        # Check if any bounding boxes intersect in both x and y
        possibles = (~((lurd[a, 0] > lurd[b, 2]) | (lurd[a, 2] < lurd[b, 0])) &
                     ~((lurd[a, 1] > lurd[b, 3]) | (lurd[a, 3] < lurd[b, 1])))
        possibles = np.nonzero(possibles)[0]
        # print(a[possibles], b[possibles])
        for i in possibles:
            shapes[a[i]].collidepolygon(shapes[b[i]])
        for P in shapes:
            P.update()
        lastupdate += deltaT
    for P in shapes[4:]:
        P.show()
    pygame.display.flip()
    for e in pygame.event.get():
        if e.type == QUIT:
            quit()
        elif e.type == KEYDOWN:
            keys.add(e.key)
            if e.key == K_ESCAPE:
                quit()
        elif e.type == KEYUP:
            keys.discard(e.key)
            if e.key == K_SPACE:
                shapes[-1].snap(0, len(shapes[-1].vertices) // 2)


# Interesting but wrong thoughts

# Vertex Inside    Outer Edge
#     [m1]            [m2]
#       o<-----ds----->|    - BEFORE (colliding, vertex past edge, inside shape)
#  u1 <--           u2 = 0   |
#      >F1>          <F2<   - CHANGE (force changes direction)
#       --> v1    v2 <--     |
#              |o           - AFTER  (separating, vertex is on edge)
# ds = v1.dt - v2.dt, where ds is the distance to separate the point from inside the
# m1.u1 + m2.u2 = m1.v1 + m2.v2, if momentum is to be conserved
# therefore, after rearranging and combining:
#     v1 = ((ds/dt) + u2 + (u1 . (m1/m2))) / (1 + (m1/m2))
# which helps to get v1, which goes into:
#     F1 = m1(v1 - u1) / dt
#        = -F2
